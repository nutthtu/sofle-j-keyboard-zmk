#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <40>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <3000>;
    acceleration-exponent = <2>;
    trigger-period-ms = <16>;
};

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        esc1 {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        bkk {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        ctrll {
            bindings = <&kp LCTRL>;
            key-positions = <>;
        };

        ctrjr {
            bindings = <&kp RCTRL>;
            key-positions = <>;
        };

        altl {
            bindings = <&kp LEFT_ALT>;
            key-positions = <21 22>;
        };

        altr {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <27 28>;
        };

        shiftl {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <>;
        };

        shiftr {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <>;
        };

        guil {
            bindings = <&kp LEFT_GUI>;
            key-positions = <11 12>;
        };

        guir {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <17 18>;
        };

        delc {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I      &kp O            &kp P       &kp BSLH
&kp LCTRL    &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K      &kp L            &kp SEMI    &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA  &kp DOT          &kp FSLH    &kp RSHFT
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &lt 1 TAB   &lt 2 SPACE   &kp ENTER   &lt 3 ENTER  &lt 4 BACKSPACE  &mo 2      &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI                 &mmv MOVE_UP     &&rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR          &mmv MOVE_DOWN   &none      &kp GRAVE  &kp TILDE         &kp MINUS          &kp EQUAL  &kp BSLH        &kp trans
&trans      &bt BT_SEL 4  &none  &none         &none         &none                    &mmv MOVE_LEFT   &none      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LBKT   &kp RBKT  &kp trans
&trans      &kp LSHFT     &kp LCTRL        &kp LEFT_GUI  &kp LEFT_ALT  &none      &mmv MOVE_RIGHT  &none      &none             &kp COMMA          &kp DOT    &kp RSHFT           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &kp SPACE            &mkp LCLK        &kp ENTER  &kp BSPC           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans  &trans        &trans          &trans        &trans        &trans    &mmv MOVE_UP     &trans  &trans  &trans      &trans     &trans      &trans
&trans     &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)          &mmv MOVE_DOWN   &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)    &kp PLUS
&trans     &kp N1      &kp N2      &kp N3      &kp N4      &kp N5          &mmv MOVE_LEFT   &kp N6      &kp N7      &kp N8      &kp N9      &kp N0    &kp RBRC
&trans     &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &none          &mmv MOVE_RIGHT  &none       &none       &none       &none       &kp RSHFT  &trans
&trans     &trans        &trans          &trans        &kp TAB     &trans          &mkp LCLK        &kp ENTER   &kp BSPC  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F1     &kp F2     &kp F3    &kp F4    &kp F5    &trans  &kp F6  &kp F7    &kp F8    &kp F9     &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none   &none     &none     &none      &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none   &kp RALT  &kp RGUI  &kp RCTRL  &kp RSHFT  &trans
&trans  &trans  &trans  &trans  &kp TAB   &kp SPACE    &trans  &trans  &kp BSPC  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none      &none   &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none      &none   &none       &none              &none  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none      &none   &none       &none              &none  &trans
&trans  &trans  &trans  &trans  &mo 5  &kp SPACE  &trans   &kp ENTER  &trans   &trans  &trans  &trans
            >;
        };
        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp HOME        &mmv MOVE_UP    &kp END   &kp PG_UP  &msc SCRL_UP    &trans  &none    &none   &none     &none     &none  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none      &none   &mkp MB1  &mkp MB2  &mkp MB3  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &none      &none   &none     &none     &none  &trans
&trans  &trans  &trans  &trans  &trans     &kp SPACE    &trans  &kp ENTER  &trans  &trans  &trans  &trans
            >;
        };
    };
};
